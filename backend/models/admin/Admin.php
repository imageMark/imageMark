<?php
namespace backend\models\admin;
use phpDocumentor\Reflection\Types\Object_;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\web\IdentityInterface;
use yii\web\NotFoundHttpException;
use Yii;

/**
 * Class Admin
 * @package backend\models\admin
 * @property string $id 主键
 * @property string $username 用户名
 * @property string $password 密码
 * @property string $auth_key KEY
 * @property string $password_reset_token 密码重置
 * @property string $nickname 别名
 * @property int $status 状态
 * @property int $role_id 角色
 * @property int $thumb_key 头像
 * @property int $thumb_url 头像地址
 * @property int $created_at 添加时间
 * @property int $updated_at 更新时间
 */
class Admin extends ActiveRecord implements IdentityInterface
{
    const STATUS_ACTIVE = 1;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'cnpo_admin';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['username','status', 'password','role_id'], 'required'],
            [['status', 'created_at', 'updated_at'], 'integer'],
            [['username', 'nickname'], 'string', 'max' => 20],
            [['username'], 'unique'],
            [['password','thumb_key','thumb_url'], 'string', 'max' => 100],
            [['auth_key', 'password_reset_token'], 'string', 'max' => 50],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'username' => '用户名',
            'password' => '密码',
            'auth_key' => '登录状态key',
            'password_reset_token' => '密码重置token',
            'nickname' => '呢称',
            'role_id'=>'关联角色',
            'thumb_key'  =>'头像',
            'thumb_url'  =>'头像地址',
            'status' => '状态',
            'created_at' => '添加时间',
            'updated_at' => '更新时间',
        ];
    }


    public function load($data, $formName = null)
    {
        if(parent::load($data, $formName)) { // TODO: Change the autogenerated stub
            $this->setPassword($this->password);
            $this->generateAuthKey();
            return true;
        }
        return false;
    }

    /**
     * @param $password
     * @throws \yii\base\Exception
     */
    public function setPassword($password)
    {
        $this->password = Yii::$app->security->generatePasswordHash($password);
    }

    /**
     * @throws \yii\base\Exception
     */
    public function generateAuthKey()
    {
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    /**
     * @inheritdoc
     */
    public function getId()
    {
        return $this->getPrimaryKey();
    }
    /**
     * @inheritdoc
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        throw new NotFoundHttpException('"findIdentityByAccessToken" is not implemented.');
    }

    /**
     * @inheritdoc
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * @inheritdoc
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    /**
     * @inheritdoc
     */
    public static function findIdentity($id)
    {
        return static::findOne(['id' => $id, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * Finds user by username
     *
     * @param string $username
     * @return static|null
     */
    public static function findByUsername($username)
    {
        return static::findOne(['username' => $username, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return boolean if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password);
    }


    public function getRoleName(){
        return $this->hasOne(\common\models\SystemRole::className(),['id'=>'role_id']);
    }

}
